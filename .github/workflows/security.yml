name: Security

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Weekly security scans on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run Bandit security scan
      run: |
        uv run bandit -r src/ -f sarif -o bandit-results.sarif --severity-level medium || true
    
    - name: Upload Bandit SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        category: bandit
    
    - name: Run Bandit for PR comments
      if: github.event_name == 'pull_request'
      run: |
        uv run bandit -r src/ -f txt -o bandit-report.txt --severity-level medium || true
        if [ -s bandit-report.txt ]; then
          echo "## 🔒 Security Scan Results" >> security-comment.md
          echo "" >> security-comment.md
          echo "Bandit found potential security issues:" >> security-comment.md
          echo "" >> security-comment.md
          echo '```' >> security-comment.md
          cat bandit-report.txt >> security-comment.md
          echo '```' >> security-comment.md
        else
          echo "## ✅ Security Scan Results" >> security-comment.md
          echo "" >> security-comment.md
          echo "No security issues found by Bandit scan." >> security-comment.md
        fi
    
    - name: Comment security results on PR
      if: github.event_name == 'pull_request' && github.event.action != 'synchronize'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-comment.md')) {
            const body = fs.readFileSync('security-comment.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run pip-audit for known vulnerabilities
      run: |
        uv run pip install pip-audit
        uv run pip-audit --format=sarif --output=pip-audit-results.sarif || true
    
    - name: Upload pip-audit SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: pip-audit-results.sarif
        category: pip-audit
    
    - name: Check for high-severity vulnerabilities
      run: |
        uv run pip-audit --format=json --output=audit-results.json || true
        uv run python -c "
        import json
        import sys
        
        try:
            with open('audit-results.json') as f:
                results = json.load(f)
            
            high_severity = []
            for vuln in results.get('vulnerabilities', []):
                if vuln.get('fix_versions'):
                    print(f'ADVISORY: {vuln.get(\"id\", \"Unknown\")} - {vuln.get(\"description\", \"No description\")}')
                    if 'high' in vuln.get('description', '').lower() or 'critical' in vuln.get('description', '').lower():
                        high_severity.append(vuln)
            
            if high_severity:
                print(f'❌ Found {len(high_severity)} high/critical severity vulnerabilities')
                sys.exit(1)
            else:
                print('✅ No high/critical severity vulnerabilities found')
        except FileNotFoundError:
            print('✅ No vulnerability report generated - likely no issues found')
        except Exception as e:
            print(f'Warning: Could not parse audit results: {e}')
        "

  supply-chain-scan:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Build package
      run: uv build
    
    - name: Verify package integrity
      run: |
        uv run python -c "
        import hashlib
        import os
        
        print('Package integrity verification:')
        for file in os.listdir('dist'):
            if file.endswith(('.whl', '.tar.gz')):
                filepath = os.path.join('dist', file)
                with open(filepath, 'rb') as f:
                    content = f.read()
                    sha256_hash = hashlib.sha256(content).hexdigest()
                    print(f'{file}: {sha256_hash}')
        
        print('✅ Package hashes generated for integrity verification')
        "
    
    - name: Check dependencies for known malicious packages
      run: |
        uv run python -c "
        import subprocess
        import json
        
        # Get list of installed packages
        result = subprocess.run(['uv', 'run', 'pip', 'list', '--format=json'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            packages = json.loads(result.stdout)
            suspicious_patterns = ['django-', 'requests-', 'urllib3-', 'numpy-', 'pandas-']
            
            print('Checking for suspicious package names:')
            for pkg in packages:
                name = pkg['name'].lower()
                for pattern in suspicious_patterns:
                    if pattern in name and not name.startswith(pattern.rstrip('-')):
                        print(f'⚠️  Suspicious package name detected: {pkg[\"name\"]}')
            
            print(f'✅ Scanned {len(packages)} packages for suspicious names')
        "

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for comprehensive scanning
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, supply-chain-scan, secrets-scan]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "## 🛡️ Security Scan Summary" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Check | Status |" >> security-summary.md
        echo "|-------|--------|" >> security-summary.md
        echo "| SAST (Bandit) | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Supply Chain | ${{ needs.supply-chain-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "" >> security-summary.md
        
        if [[ "${{ needs.sast-scan.result }}" == "success" && "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.supply-chain-scan.result }}" == "success" && "${{ needs.secrets-scan.result }}" == "success" ]]; then
          echo "🎉 **All security checks passed!**" >> security-summary.md
        else
          echo "⚠️ **Some security checks failed. Please review the results above.**" >> security-summary.md
        fi
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md