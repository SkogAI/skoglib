name: Security

on:
  # Run security scans on every PR
  pull_request:
    branches: [ main ]
  
  # Run weekly security scans
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC
  
  # Allow manual security scans
  workflow_dispatch:

jobs:
  # SAST (Static Application Security Testing) 
  sast:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run Bandit security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-results.json
        uv run bandit -r src/ -f txt
      continue-on-error: true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-results.json
    
    # Optional: If you want to use GitHub Security tab for results
    # - name: Initialize CodeQL
    #   uses: github/codeql-action/init@v3
    #   with:
    #     languages: python
    # 
    # - name: Perform CodeQL Analysis
    #   uses: github/codeql-action/analyze@v3

  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    # Vulnerability scanning with safety
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Generate requirements for safety scan
      run: |
        # Generate a requirements.txt file for safety to scan
        uv export --format requirements-txt --no-hashes > requirements.txt
        echo "Generated requirements.txt:"
        cat requirements.txt
    
    - name: Run Safety dependency scan
      run: |
        uv run python -m pip install safety
        uv run safety check -r requirements.txt --json --output safety-results.json
        uv run safety check -r requirements.txt
      continue-on-error: true
    
    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results
        path: safety-results.json
    
    # GitHub Security Advisories scanning
    - name: Run GitHub Security Advisory scan
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Supply chain security
  supply-chain:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Verify dependency integrity  
      run: |
        # Check that uv.lock is up to date
        uv sync --dev --locked
        
        # Verify no unexpected changes to lock file
        if ! git diff --exit-code uv.lock; then
          echo "❌ uv.lock file has unexpected changes"
          exit 1
        fi
        
        echo "✅ Dependency lock file integrity verified"
    
    - name: Check for known malicious packages
      run: |
        # Generate requirements for analysis
        uv export --format requirements-txt --no-hashes > requirements.txt
        
        # Basic check for suspicious package names (common typosquatting patterns)
        echo "Checking for suspicious package names..."
        
        # This is a basic example - in production you might use more sophisticated tools
        SUSPICIOUS_PATTERNS="reqeusts urllib3_ beautifulsoup djangoo flask_ numpy_ pandas_ scipy_"
        
        for pattern in $SUSPICIOUS_PATTERNS; do
          if grep -i "$pattern" requirements.txt; then
            echo "⚠️  Found potentially suspicious package: $pattern"
            echo "Please verify this is legitimate"
          fi
        done
        
        echo "✅ Basic package name verification completed"

  # Security policy compliance
  compliance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "⚠️  No SECURITY.md file found"
          echo "Consider adding a security policy to help users report vulnerabilities"
        else
          echo "✅ Security policy found"
        fi
    
    - name: Check for sensitive files
      run: |
        echo "Checking for accidentally committed sensitive files..."
        
        # Check for common sensitive file patterns
        SENSITIVE_PATTERNS=".env .key .pem .p12 .pfx .jks id_rsa id_dsa"
        
        for pattern in $SENSITIVE_PATTERNS; do
          if find . -name "*$pattern*" -not -path "./.git/*" | grep -v ".env.example"; then
            echo "⚠️  Found potentially sensitive file with pattern: $pattern"
          fi
        done
        
        # Check for hardcoded secrets in code
        if grep -r -i "password\|secret\|token\|key" src/ --include="*.py" | grep -v "# nosec" | head -5; then
          echo "⚠️  Found potential hardcoded secrets (review above results)"
          echo "Use environment variables or secure secret management instead"
        fi
        
        echo "✅ Sensitive file check completed"

  # Aggregate security results
  security-summary:
    needs: [sast, dependency-scan, supply-chain, compliance]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-results
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "Commit: ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Job Results" >> security-summary.md
        echo "- SAST: ${{ needs.sast.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Supply Chain: ${{ needs.supply-chain.result }}" >> security-summary.md
        echo "- Compliance: ${{ needs.compliance.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        if [ -d security-results ]; then
          echo "## Available Reports" >> security-summary.md
          find security-results -name "*.json" -exec basename {} \; | sort >> security-summary.md
        fi
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md